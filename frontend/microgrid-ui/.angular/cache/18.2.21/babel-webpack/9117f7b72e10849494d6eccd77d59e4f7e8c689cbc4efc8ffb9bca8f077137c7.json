{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ASUS/Documents/GitHub/seminario-integrador/frontend/microgrid-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor() {\n      this.zni$ = new BehaviorSubject('Leticia');\n      this.files = {\n        demand: null,\n        forecast: null,\n        parameters: null,\n        instance: null\n      };\n    }\n    setZNI(zni) {\n      this.zni$.next(zni);\n    }\n    setFile(kind, file) {\n      this.files[kind] = file;\n    }\n    readText(file) {\n      return _asyncToGenerator(function* () {\n        return yield file.text();\n      })();\n    }\n    validateDemand(text) {\n      return _asyncToGenerator(function* () {\n        const l = text.trim().split(/\\r?\\n/);\n        const h = l[0].split(',');\n        if (h[0] !== 't' || h[1] !== 'demand') throw new Error('Headers inválidos');\n        if (l.length < 8761) throw new Error('Se esperan 8760 filas');\n      })();\n    }\n    validateForecast(text) {\n      return _asyncToGenerator(function* () {\n        const h = text.trim().split(/\\r?\\n/)[0].split(',');\n        for (const k of ['t', 'GHI', 'DNI', 'DHI', 'T_amb', 'Wt', 'SF']) if (!h.includes(k)) throw new Error(`Falta ${k}`);\n      })();\n    }\n    validateParameters(json) {\n      if (!json?.generators?.length) throw new Error('parameters.generators vacío');\n    }\n    validateInstance(json) {\n      if (json?.nse == null) throw new Error('instance.nse requerido');\n    }\n    allReady() {\n      return !!(this.files.demand && this.files.forecast && this.files.parameters && this.files.instance);\n    }\n    static {\n      this.ɵfac = function DataService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || DataService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: DataService,\n        factory: DataService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return DataService;\n})();","map":{"version":3,"names":["BehaviorSubject","DataService","constructor","zni$","files","demand","forecast","parameters","instance","setZNI","zni","next","setFile","kind","file","readText","_asyncToGenerator","text","validateDemand","l","trim","split","h","Error","length","validateForecast","k","includes","validateParameters","json","generators","validateInstance","nse","allReady","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\Documents\\GitHub\\seminario-integrador\\frontend\\microgrid-ui\\src\\app\\services\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nexport type FileKind = 'demand'|'forecast'|'parameters'|'instance';\nexport interface Files { demand: File|null; forecast: File|null; parameters: File|null; instance: File|null; }\n@Injectable({ providedIn: 'root' })\nexport class DataService {\n  zni$ = new BehaviorSubject<string>('Leticia');\n  files: Files = { demand: null, forecast: null, parameters: null, instance: null };\n  setZNI(zni: string){ this.zni$.next(zni); }\n  setFile(kind: FileKind, file: File | null){ this.files[kind] = file; }\n  async readText(file: File){ return await file.text(); }\n  async validateDemand(text: string){ const l=text.trim().split(/\\r?\\n/); const h=l[0].split(','); if(h[0]!=='t'||h[1]!=='demand') throw new Error('Headers inválidos'); if(l.length<8761) throw new Error('Se esperan 8760 filas'); }\n  async validateForecast(text: string){ const h=text.trim().split(/\\r?\\n/)[0].split(','); for(const k of ['t','GHI','DNI','DHI','T_amb','Wt','SF']) if(!h.includes(k)) throw new Error(`Falta ${k}`); }\n  validateParameters(json: any){ if(!json?.generators?.length) throw new Error('parameters.generators vacío'); }\n  validateInstance(json: any){ if(json?.nse == null) throw new Error('instance.nse requerido'); }\n  allReady(){ return !!(this.files.demand && this.files.forecast && this.files.parameters && this.files.instance); }\n}\n"],"mappings":";AACA,SAASA,eAAe,QAAQ,MAAM;;AAItC,WAAaC,WAAW;EAAlB,MAAOA,WAAW;IADxBC,YAAA;MAEE,KAAAC,IAAI,GAAG,IAAIH,eAAe,CAAS,SAAS,CAAC;MAC7C,KAAAI,KAAK,GAAU;QAAEC,MAAM,EAAE,IAAI;QAAEC,QAAQ,EAAE,IAAI;QAAEC,UAAU,EAAE,IAAI;QAAEC,QAAQ,EAAE;MAAI,CAAE;;IACjFC,MAAMA,CAACC,GAAW;MAAG,IAAI,CAACP,IAAI,CAACQ,IAAI,CAACD,GAAG,CAAC;IAAE;IAC1CE,OAAOA,CAACC,IAAc,EAAEC,IAAiB;MAAG,IAAI,CAACV,KAAK,CAACS,IAAI,CAAC,GAAGC,IAAI;IAAE;IAC/DC,QAAQA,CAACD,IAAU;MAAA,OAAAE,iBAAA;QAAG,aAAaF,IAAI,CAACG,IAAI,EAAE;MAAC;IAAC;IAChDC,cAAcA,CAACD,IAAY;MAAA,OAAAD,iBAAA;QAAG,MAAMG,CAAC,GAACF,IAAI,CAACG,IAAI,EAAE,CAACC,KAAK,CAAC,OAAO,CAAC;QAAE,MAAMC,CAAC,GAACH,CAAC,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC;QAAE,IAAGC,CAAC,CAAC,CAAC,CAAC,KAAG,GAAG,IAAEA,CAAC,CAAC,CAAC,CAAC,KAAG,QAAQ,EAAE,MAAM,IAAIC,KAAK,CAAC,mBAAmB,CAAC;QAAE,IAAGJ,CAAC,CAACK,MAAM,GAAC,IAAI,EAAE,MAAM,IAAID,KAAK,CAAC,uBAAuB,CAAC;MAAC;IAAC;IAC7NE,gBAAgBA,CAACR,IAAY;MAAA,OAAAD,iBAAA;QAAG,MAAMM,CAAC,GAACL,IAAI,CAACG,IAAI,EAAE,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC;QAAE,KAAI,MAAMK,CAAC,IAAI,CAAC,GAAG,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,OAAO,EAAC,IAAI,EAAC,IAAI,CAAC,EAAE,IAAG,CAACJ,CAAC,CAACK,QAAQ,CAACD,CAAC,CAAC,EAAE,MAAM,IAAIH,KAAK,CAAC,SAASG,CAAC,EAAE,CAAC;MAAC;IAAC;IACpME,kBAAkBA,CAACC,IAAS;MAAG,IAAG,CAACA,IAAI,EAAEC,UAAU,EAAEN,MAAM,EAAE,MAAM,IAAID,KAAK,CAAC,6BAA6B,CAAC;IAAE;IAC7GQ,gBAAgBA,CAACF,IAAS;MAAG,IAAGA,IAAI,EAAEG,GAAG,IAAI,IAAI,EAAE,MAAM,IAAIT,KAAK,CAAC,wBAAwB,CAAC;IAAE;IAC9FU,QAAQA,CAAA;MAAI,OAAO,CAAC,EAAE,IAAI,CAAC7B,KAAK,CAACC,MAAM,IAAI,IAAI,CAACD,KAAK,CAACE,QAAQ,IAAI,IAAI,CAACF,KAAK,CAACG,UAAU,IAAI,IAAI,CAACH,KAAK,CAACI,QAAQ,CAAC;IAAE;;;yCAVtGP,WAAW;MAAA;IAAA;;;eAAXA,WAAW;QAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;QAAAC,UAAA,EADE;MAAM;IAAA;;SACnBnC,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}